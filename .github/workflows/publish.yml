name: Publish to PyPI

# This workflow runs when:
# 1. A pull request is merged into the main branch
# 2. You manually trigger it from the GitHub Actions tab
on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  publish:
    runs-on: ubuntu-latest
    
    # Only run if this is a merge commit (not just any push to main)
    if: github.event.head_commit.message != null
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version determination
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install flit
      run: |
        python -m pip install --upgrade pip
        pip install flit
    
    - name: Check if version changed
      id: version_check
      run: |
        # Get the current version from __version__.py
        CURRENT_VERSION=$(python -c "import sys; sys.path.append('radprompter'); from __version__ import __version__; print(__version__)")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Check if this version already exists on PyPI
        pip install --no-deps radprompter==$CURRENT_VERSION 2>/dev/null && echo "version_exists=true" >> $GITHUB_OUTPUT || echo "version_exists=false" >> $GITHUB_OUTPUT
    
    - name: Build and publish to PyPI
      if: steps.version_check.outputs.version_exists == 'false'
      env:
        FLIT_USERNAME: __token__
        FLIT_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Publishing version ${{ steps.version_check.outputs.current_version }} to PyPI..."
        flit publish
    
    - name: Create GitHub Release
      if: steps.version_check.outputs.version_exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version_check.outputs.current_version }}
        release_name: Release v${{ steps.version_check.outputs.current_version }}
        body: |
          Automated release for version ${{ steps.version_check.outputs.current_version }}
          
          This release was automatically created when the pull request was merged.
        draft: false
        prerelease: false
    
    - name: Skip publishing - version exists
      if: steps.version_check.outputs.version_exists == 'true'
      run: |
        echo "Version ${{ steps.version_check.outputs.current_version }} already exists on PyPI. Skipping publication."
        echo "Remember to bump the version in radprompter/__version__.py before merging your next PR!" 